
import groovyx.net.http.*
import groovyx.net.http.HttpResponseException
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

String sparql = "@sparqls@"


/**
* Submits an encoded query to the configured SPARQL endpoint,
* and returns the reply.
* @param acceptType MIME type to specify for reply.
* @param query SPARQL query to submit.
* @returns SPARQL reply, as a String.
*/
String getSparqlReply(String acceptType, String query) {
    String replyString
    def encodedQuery = URLEncoder.encode(query)
    def q = "@sparqls@query?query=${encodedQuery}"
    if (acceptType == "application/json") {
        q +="&output=json"
    }

    def http = new HTTPBuilder(q)
    http.request( Method.GET, ContentType.TEXT ) { req ->
        headers.Accept = acceptType
        response.success = { resp, reader ->
            replyString = reader.text
        }
    }
    return replyString
}

String getQuery() {
return """
select distinct ?category  ?catlabel  where {
?topic <http://www.w3.org/2000/01/rdf-schema#subClassOf>      ?category .
?category <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?catlabel .
}
GROUP BY ?category ?catlabel
ORDER BY ?catlabel
"""
}


def slurper = new groovy.json.JsonSlurper()
String queryString = getQuery()
def parsedReply = slurper.parseText(getSparqlReply("application/json", queryString))



html.html {
    head {
        title("Latin")
        link(type : "text/css", rel : "stylesheet", href : "css/normalize.css", title : "CSS stylesheet")
        link(type : "text/css", rel : "stylesheet", href : "css/steely.css", title : "CSS stylesheet")
    }
    
    body {
    
    	header {
            h1("Sources for teaching Latin")
    	}
    	
    	article {
            p {
                mkp.yield "This site presents citable source material for teaching Latin from real texts (epigraphic, numismatic, etc).  Planned additions currently in developement include guides to reading epigraphic and numismatic material, and searchable indexing of documents in relation to one or more textbooks."
            }
            h2("Find sources")

            p {
                a (href : "browse", "Browse all grammatical categories and topics")
            }
            
            p("Search for specific topics related to these broader categories:")
            form (action: "cats") {
                select(name: "category") {
                    parsedReply.results.bindings.each { b ->
                        option(value : "${b.category.value}", "${b.catlabel.value}")
                    }
                }
                input(type : "submit", value : "look up")
            }
            


            h2 ("Links") 

            ul{
                li {
                    a(href : "http://beta.hpcc.uh.edu/tomcat/latepig/home", "CITE services")
                    mkp.yield " for the project."
                }
                li {
                    mkp.yield "The project's "
                    a (href : "https://github.com/neelsmith/latinsrcs", "github repository")
                    mkp.yield "."
                }
            }
        }
    }
}
