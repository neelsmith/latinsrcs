/** 

*/


import groovyx.net.http.*
import groovyx.net.http.HttpResponseException
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

String sparql = "@sparqls@"


/**
* Submits an encoded query to the configured SPARQL endpoint,
* and returns the reply.
* @param acceptType MIME type to specify for reply.
* @param query SPARQL query to submit.
* @returns SPARQL reply, as a String.
*/
String getSparqlReply(String acceptType, String query) {
    String replyString
    def encodedQuery = URLEncoder.encode(query)
    def q = "@sparqls@query?query=${encodedQuery}"
    if (acceptType == "application/json") {
        q +="&output=json"
    }

    def http = new HTTPBuilder(q)
    http.request( Method.GET, ContentType.TEXT ) { req ->
        headers.Accept = acceptType
        response.success = { resp, reader ->
            replyString = reader.text
        }
    }
    return replyString
}

String getQuery(String urn) {
String reply = """
SELECT ?o WHERE {
?s <http://www.homermultitext.org/cite/rdf/illustratedBy>  ?o .
FILTER (str(?s) = "${urn}")
}
"""

return reply
}

// Add error checking on required parameter...
String urn = params.topic
String topicLabel = params.label

def slurper = new groovy.json.JsonSlurper()
String queryString = getQuery(urn)
def parsedReply = slurper.parseText(getSparqlReply("application/json", queryString))

html.html {
    head {
        title("Latin sources")
        link(type : "text/css", rel : "stylesheet", href : "css/normalize.css", title : "CSS stylesheet")
	link(href : "css/latin.css", rel : "stylesheet", type : "text/css")
    }
    
    body {
    	header {
    	
            nav (role : "navigation") {
                a(href : '@homeUrl@', "Home")
            }
            h1("Illustrations: ${topicLabel}")
    	}
    	
    	article {
            String currCategory = ""
            ul {
                parsedReply.results.bindings.each { b -> 
                    String imgUrn = b.o.value
                    li { 
                        a (href : "@images@?request=GetIIPMooViewer&urn=${imgUrn}" ){
                            img (src : "@images@?request=GetBinaryImage&urn=${imgUrn}&w=600")
                        }
                    }
                }
            }
        }

	// citekit magic:
        /*
	ul (id: "citekit-sources") {
            li (class : "citekit-source cite-image citekit-default", id : "defaultimage", "@images@" )
	}
*/
        footer("")
    }
}
